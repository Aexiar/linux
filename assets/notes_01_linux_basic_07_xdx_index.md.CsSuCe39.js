import{_ as s,c as i,o as e,a6 as a}from"./chunks/framework.BpgRCUtN.js";const l="/linux/assets/1.DMnIk8it.png",n="/linux/assets/2.BkrTDguj.png",t="/linux/assets/3.DKzoe20Q.png",p="/linux/assets/4.BmnPGCKn.gif",d="/linux/assets/5.CEdSnCmw.png",h="/linux/assets/6.UTWf9gJ9.gif",c="/linux/assets/7.CCZIHK5q.gif",r="/linux/assets/8.woan-AcR.gif",o="/linux/assets/9.Bqa2fQ8m.gif",k="/linux/assets/10.CasFzUZ4.gif",u="/linux/assets/11.Boy-h70n.gif",g="/linux/assets/12.927SthOU.gif",b="/linux/assets/13.DhZ-tmrc.gif",m="/linux/assets/14.CNNdHqtk.gif",F="/linux/assets/15.B5J83cGo.gif",v="/linux/assets/16.NYZQmSue.gif",y="/linux/assets/17.CpjE105_.gif",C="/linux/assets/18.fvqFzXOC.gif",f="/linux/assets/19.COmDF1kr.gif",x="/linux/assets/20.BDyxyKVD.gif",B="/linux/assets/21.VYTHBASc.png",_="/linux/assets/22.BhrNHd5P.gif",E="/linux/assets/23.CsKmd5kG.gif",q="/linux/assets/24.CkwNeY67.gif",w="/linux/assets/25.CExluvHJ.gif",D="/linux/assets/26.CmhjpoeS.gif",A="/linux/assets/27.BOaRYGmx.gif",P="/linux/assets/28.BZTpwm3L.gif",z="/linux/assets/29.C7h9wO1f.png",L="/linux/assets/30.Dbz9wmE2.png",S="/linux/assets/31.6XEHG2D4.png",O="/linux/assets/32.Bh-UNO98.png",T="/linux/assets/33.CYb2zOu_.png",N="/linux/assets/34.CTvNptfY.png",G="/linux/assets/35.BvPb6POF.gif",H="/linux/assets/36.BF8lsbkX.png",$="/linux/assets/37.C45_GDqN.png",K="/linux/assets/38.aQJSQ9KP.gif",Q="/linux/assets/39.ClxMyXrL.gif",Y="/linux/assets/40.Byrkp5sM.gif",U="/linux/assets/41.CMxm4z-F.gif",Z="/linux/assets/42.3UvDEcBO.png",J="/linux/assets/43.C-eGTncv.png",M="/linux/assets/44.B2kZCYfP.gif",V="/linux/assets/45.CcqgKHmb.gif",ts=JSON.parse('{"title":"第一章：管道（⭐）","description":"","frontmatter":{},"headers":[],"relativePath":"notes/01_linux_basic/07_xdx/index.md","filePath":"notes/01_linux_basic/07_xdx/index.md","lastUpdated":1707318120000}'),j={name:"notes/01_linux_basic/07_xdx/index.md"},I=a('<h1 id="第一章-管道-⭐" tabindex="-1">第一章：管道（⭐） <a class="header-anchor" href="#第一章-管道-⭐" aria-label="Permalink to &quot;第一章：管道（⭐）&quot;">​</a></h1><h2 id="_1-1-扫清概念" tabindex="-1">1.1 扫清概念 <a class="header-anchor" href="#_1-1-扫清概念" aria-label="Permalink to &quot;1.1 扫清概念&quot;">​</a></h2><ul><li>在 Linux 中，<code>标准输入</code>（stdin）、<code>标准输出</code>（stdout）和<code>标准错误</code>（stderr）都可以通过<code>文件描述符</code>来表示，它们分别对应文件描述符的 <code>0</code> 、 <code>1</code> 和 <code>2</code> 。</li><li>以下是一个简单的图例，用来展示这些<code>标准输入</code>、<code>标准输出</code>和<code>标准错误</code>在<code>进程</code>中的流向，即：</li></ul><p><img src="'+l+'" alt="image-20240207081941447"></p><ul><li>下面是对于<code>标准输入</code>、<code>标准输出</code>以及<code>标准错误</code>的<code>详细解释</code>： <ul><li>标准输入（stdin）： <ul><li><code>文件描述符</code>是 <code>0</code> 。</li><li>默认情况下，标准输入关联到终端（键盘）。</li><li>进程可以通过<code>标准输入</code>接收到数据，如：用户在命令行中输入的文本或者通过管道传递的数据。</li></ul></li><li>标准输出（stdout）： <ul><li><code>文件描述符</code>是 <code>1</code> 。</li><li>默认情况下，标准输出关联到终端（屏幕）。</li><li>进程可以通过<code>标准输出</code>发送数据，这些数据通常会显示在用户的屏幕上，也可以通过管道传递给其它的进程。</li></ul></li><li>标准错误（stderr）： <ul><li><code>文件描述</code>是 <code>2</code> 。</li><li>默认情况下，标准错误也是关联到终端（屏幕）；但是，其通常用于输出错误信息，而不是程序的正常输出。</li><li>错误信息通常用于调试和通知用户程序运行时遇到的问题。</li></ul></li></ul></li></ul><blockquote><p>注意⚠️：</p><ul><li>① 在 Linux 命令中，我们可以使用<code>重定向</code>操作符，如：<code>&lt;</code>、<code>&gt;</code>、<code>|</code> 等改变上述标准流的默认行为。 <ul><li>我们可以将<code>标准输入</code>重定向到<code>文件</code>（默认是终端（键盘））。</li><li>我们可以将<code>标准输出</code>重定向到<code>文件</code>（默认是终端（屏幕））。</li><li>我们可以将<code>标准错误</code>重定向到<code>文件</code>（默认是终端（屏幕））。</li><li>……</li></ul></li><li>② 上述这些操作对于<code>自动化脚本</code>和<code>复杂的数据处理任务</code>非常有用且高效。</li></ul></blockquote><h2 id="_1-2-概念" tabindex="-1">1.2 概念 <a class="header-anchor" href="#_1-2-概念" aria-label="Permalink to &quot;1.2 概念&quot;">​</a></h2><ul><li>其实，之前我们就使用过<code>管道</code>（使用 <code>|</code> 表示）；但是，一直没有怎么解释，如：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ll</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nrk5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> head</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在 Linux 中，<code>管道</code>是一个非常强大的概念，用于将<code>一个命令的标准输出</code>作为<code>另一个命令的标准输入</code>，通过管道的机制，我们可以将简单的命令结合起来，创建复杂的数据处理流程。</li><li><code>管道</code>的<code>定义</code>如下：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 命令2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>可以使用如下的图示来解释管道，即：</li></ul><p><img src="'+n+'" alt="image-20240207120147765"></p><ul><li>我们复习下，Linux 命令的格式：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>命令（command） [选项](option) [参数](arguments/parameter)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>其命令格式说明：</li></ul><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">说明</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">命令</td><td style="text-align:left;">Linux 中通过<code>命令</code>控制整个操作系统。</td><td style="text-align:left;">通常而言，命令是单词或单词缩写。</td></tr><tr><td style="text-align:left;">选项</td><td style="text-align:left;">就是<code>功能</code>，不同的<code>选项</code>对应不同的<code>功能</code>。</td><td style="text-align:left;">通常而言，选项会使用加上 <code>-</code> 或 <code>--</code> 前缀。</td></tr><tr><td style="text-align:left;">参数</td><td style="text-align:left;">命令处理的<code>目标</code></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>注意⚠️：并不是所有的命令<code>都遵循</code>上述的格式，有些命令就只有命令，而没有选项或参数，如：<code>pwd</code> 等。</p></blockquote><ul><li>我们之前，是这么使用 <a href="https://aexiar.github.io/linux/notes/01_linux_basic/05_xdx/#_5-2-sort" target="_blank" rel="noreferrer">sort</a> 命令的，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/a.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>没什么问题，因为 sort 命令的格式是这样的，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-n][-r][-k][-t] [文件] ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：如果没有指定文件，则从标准输入中读取。</p></blockquote><ul><li>需要<code>注意</code>⚠️的是，默认情况下，管道符（<code>|</code>） 将<code>上一个命令</code>的<code>输出</code>作为<code>字符串</code>传递给<code>下一个命令</code>，即：</li></ul><p><img src="'+t+'" alt="image-20240207120418244"></p><h2 id="_1-3-案例" tabindex="-1">1.3 案例 <a class="header-anchor" href="#_1-3-案例" aria-label="Permalink to &quot;1.3 案例&quot;">​</a></h2><ul><li><p>需求： <code>ll /etc</code> 取出最大的前 5 个。</p></li><li><p>示例：</p></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ll</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nrk5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> head</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+p+'" alt=""></p><h1 id="第二章-linux-四剑客-⭐" tabindex="-1">第二章：Linux 四剑客（⭐） <a class="header-anchor" href="#第二章-linux-四剑客-⭐" aria-label="Permalink to &quot;第二章：Linux 四剑客（⭐）&quot;">​</a></h1><h2 id="_1-1-概述" tabindex="-1">1.1 概述 <a class="header-anchor" href="#_1-1-概述" aria-label="Permalink to &quot;1.1 概述&quot;">​</a></h2><ul><li>Linux 中的用于<code>处理大规模的文本数据</code>，一般都需要使用 <code>grep</code> 、<code>sed</code>、<code>awk</code> 和 <code>find</code> 命令；所以，这几个命令也被人称为 Linux 四剑客。</li><li>其中，<code>grep</code> 命令用于在文本文件中<code>过滤</code>指定模式的行。</li><li>其中，<code>sed</code> 用于对文本文件进行<code>替换</code>、<code>删除</code>、<code>插入</code>等操作，即<code>编辑</code>操作。</li><li>其中，<code>awk</code> 用于对文本文件进行<code>按列</code>和<code>格式化</code>文本数据。</li><li>其中，<code>find</code> 命令用于<code>搜索</code>文件系统中<code>指定条件</code>的<code>文件</code>或<code>目录</code>。</li></ul><blockquote><p>注意⚠️：本次只讲解 <code>grep</code> 命令和 <code>find</code> 命令，因为其简单且容易掌握；其余的 <code>sed</code> 命令和 <code>awk</code> 命令后续讲解。</p></blockquote><h2 id="_1-2-grep-命令" tabindex="-1">1.2 grep 命令 <a class="header-anchor" href="#_1-2-grep-命令" aria-label="Permalink to &quot;1.2 grep 命令&quot;">​</a></h2><h3 id="_1-2-1-概述" tabindex="-1">1.2.1 概述 <a class="header-anchor" href="#_1-2-1-概述" aria-label="Permalink to &quot;1.2.1 概述&quot;">​</a></h3><ul><li><code>grep</code> 是一个文本搜索工具，用于在<code>文件</code>或<code>管道</code>中<code>查找</code>（<code>过滤</code>）指定内容（<code>字符串</code>）的<code>行</code>，定义如下：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>grep [-i][-n][-v] &#39;字符串&#39; [文件]...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>对应的英文<code>：Global Regular Expression Print</code>，翻译为中文就是<code>全局正则输出</code>。</li><li>选项： <ul><li><code>-i</code>， <code>--ignore-case</code>：忽略大小写。</li><li><code>-n</code>，<code>--line-number</code>：显示行号。</li><li><code>-v</code>，<code>--invert-match</code>：反向匹配指定的字符串，即忽略指定内容的某些行。</li></ul></li></ul><blockquote><p>注意⚠️：如果没有指定文件，则从标准输入中读取。</p></blockquote><ul><li><code>过滤</code>类似于<code>淘米</code>，通过<code>淘米筛</code>将一些<code>小的颗粒</code>以及<code>杂质</code>等<code>过滤</code>掉，只剩下<code>米</code>：</li></ul><p><img src="'+d+'" alt="image-20240206163639911"></p><h3 id="_1-2-2-案例-基本使用" tabindex="-1">1.2.2 案例（基本使用） <a class="header-anchor" href="#_1-2-2-案例-基本使用" aria-label="Permalink to &quot;1.2.2 案例（基本使用）&quot;">​</a></h3><ul><li>示例：从 /etc/passwd 文件中查找包含 root 的行</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/passwd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+h+'" alt=""></p><ul><li>示例：查询 chronyd 日期同步进程</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chronyd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+c+'" alt=""></p><ul><li>示例：查询系统用户登录的错误信息</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Failed password&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/secure</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+r+'" alt=""></p><ul><li>示例：统计系统用户登录的错误次数</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Failed password&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/secure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+o+'" alt=""></p><h3 id="_1-2-3-案例-显示行号" tabindex="-1">1.2.3 案例（显示行号） <a class="header-anchor" href="#_1-2-3-案例-显示行号" aria-label="Permalink to &quot;1.2.3 案例（显示行号）&quot;">​</a></h3><ul><li>示例：从 /etc/passwd 文件中查找包含 root 的行以及行号</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/passwd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+k+'" alt=""></p><ul><li>示例：查询系统用户登录的错误信息以及行号</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Failed password&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/secure</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+u+'" alt=""></p><h3 id="_1-2-4-案例-不区分大小写" tabindex="-1">1.2.4 案例（不区分大小写） <a class="header-anchor" href="#_1-2-4-案例-不区分大小写" aria-label="Permalink to &quot;1.2.4 案例（不区分大小写）&quot;">​</a></h3><ul><li><p>场景：有的时候，我们也不清楚搜索的内容是大写还是小写；此时，就可以使用 <code>-i</code> 参数了。</p></li><li><p>示例：</p></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;failed passwod&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/secure</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+g+'" alt=""></p><h3 id="_1-2-5-案例-排除" tabindex="-1">1.2.5 案例（排除） <a class="header-anchor" href="#_1-2-5-案例-排除" aria-label="Permalink to &quot;1.2.5 案例（排除）&quot;">​</a></h3><ul><li><p>场景：有的时候，我们不需要具体查询的内容；但是，我们知道要排除什么内容；此时，就可以使用 <code>-v</code> 参数了。</p></li><li><p>示例：查询 chronyd 日期同步进程</p></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chronyd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grep</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+b+'" alt=""></p><h2 id="_1-3-find-命令" tabindex="-1">1.3 find 命令 <a class="header-anchor" href="#_1-3-find-命令" aria-label="Permalink to &quot;1.3 find 命令&quot;">​</a></h2><h3 id="_1-3-1-概述" tabindex="-1">1.3.1 概述 <a class="header-anchor" href="#_1-3-1-概述" aria-label="Permalink to &quot;1.3.1 概述&quot;">​</a></h3><ul><li><code>find</code> 命令用于<code>搜索</code>文件系统中<code>指定条件</code>的<code>文件</code>或<code>目录</code>，定义如下：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [path...] [-type xxx][-name xxx][-size xxx][-mtime xxx]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>参数：<code>path...</code>，指定要搜索的目录路径；默认是当前目录。</li><li>选项：</li></ul><table><thead><tr><th>选项</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>-type [d|f]</td><td>根据文件类型的类型查找。</td><td>f 表示文件，d 表示目录。</td></tr><tr><td>-name xxx</td><td>要文件或目录的名称查找。</td><td></td></tr><tr><td>-size xxx</td><td>根据文件的大小查找。</td><td><code>+10k</code> 表示大于 10k，<code>-10k</code> 表示小于 10k，单位是：k、M、G 等。</td></tr><tr><td>-mtime xxx</td><td>根据文件的修改时间查找。</td><td><code>-7</code> 表示最近 7 天内的文件，<code>+7</code> 表示 7 天之前的文件。<br>m 表示 modify ，翻译为中文是<code>修改</code>的意思。</td></tr></tbody></table><blockquote><p>注意⚠️：在实际工作中，通常我们使用 find 命令的场景是<code>在指定目录中查找想要的文件</code>。</p></blockquote><h3 id="_1-3-2-案例-基本使用" tabindex="-1">1.3.2 案例（基本使用） <a class="header-anchor" href="#_1-3-2-案例-基本使用" aria-label="Permalink to &quot;1.3.2 案例（基本使用）&quot;">​</a></h3><ul><li>示例：查找名为 hostname 的文件（精确查找）</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> / -type f -name &#39;hostname&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+m+`" alt=""></p><ul><li>示例：查找名为 ls 的文件（精确查找）</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ls 是命令，在 Linux 中，万物皆是文件；所以，ls命令也是文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> / -type f -name &#39;ls&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+F+'" alt=""></p><ul><li>示例：查找 /etc 目录下名为 hostname 的文件（精确查找）</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc -type f -name &#39;hostname&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+v+`" alt=""></p><ul><li>示例：查找 /etc 目录下以 <code>.conf</code> 结尾的文件（模糊查找，常用）</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># * 表示任意，*.conf 就是任意以 .conf 结尾的文件，如：nginx.conf 等</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc -type f -name &#39;*.conf&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+y+`" alt=""></p><h3 id="_1-3-3-案例-根据文件大小查找" tabindex="-1">1.3.3 案例（根据文件大小查找） <a class="header-anchor" href="#_1-3-3-案例-根据文件大小查找" aria-label="Permalink to &quot;1.3.3 案例（根据文件大小查找）&quot;">​</a></h3><ul><li>示例：查询 /etc 和 /tmp 目录下等于 10kb 的文件</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># size 是大小的意思，-size 10k 表示 10kb 的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc /tmp	-type f -size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">k</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+C+`" alt=""></p><ul><li>示例：查询 /etc 和 /tmp 目录下大于 100kb 的文件（常用）</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># size 是大小的意思，-size +10k 表示大于 100kb 的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc /tmp	-type f -size +100k</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+f+`" alt=""></p><ul><li>示例：查询 /etc 和 /tmp 目录下小于 1kb 的文件</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># size 是大小的意思，-size -5k 表示小于 1kb 的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc /tmp	-type f -size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">k</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+x+'" alt=""></p><h3 id="_1-3-4-案例-根据修改时间查找" tabindex="-1">1.3.4 案例（根据修改时间查找） <a class="header-anchor" href="#_1-3-4-案例-根据修改时间查找" aria-label="Permalink to &quot;1.3.4 案例（根据修改时间查找）&quot;">​</a></h3><ul><li>时间是一维的，和 size 不一样，是去<code>过去的时间</code>中查找，如下所示：</li></ul><p><img src="'+B+'" alt="image-20240207162503418"></p><ul><li>示例：查找最近 5 天内修改的文件</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc -type f -mtime </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+_+'" alt=""></p><ul><li>示例：查找 /etc 目录下 1000 天前以 <code>.conf</code> 结尾的文件</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc -type f -mtime +1000 -name &#39;*.conf&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+E+'" alt=""></p><h3 id="_1-3-5-案例-综合案例" tabindex="-1">1.3.5 案例（综合案例） <a class="header-anchor" href="#_1-3-5-案例-综合案例" aria-label="Permalink to &quot;1.3.5 案例（综合案例）&quot;">​</a></h3><ul><li>示例：查找 /etc 目录下以 <code>.conf</code> 结尾的，文件大于 10kb 以及修改时间是 7 天之前的文件</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc -type f -size +10k -mtime +7 -name &#39;*.conf&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+q+`" alt=""></p><h3 id="_1-3-6-案例-进阶案例-了解" tabindex="-1">1.3.6 案例（进阶案例，了解） <a class="header-anchor" href="#_1-3-6-案例-进阶案例-了解" aria-label="Permalink to &quot;1.3.6 案例（进阶案例，了解）&quot;">​</a></h3><ul><li>示例：查找文件的时候，指定目录的层级（深度）</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  -maxdepth 2 就是目录最大的层级（深度）2 ；不加就是所有层；并且必须是选项的第一个。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> / -maxdepth </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  -type f -size +2k -mtime +15 -name &#39;*.conf&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+w+`" alt=""></p><ul><li>示例：查找文件的时候，不区分文件名的大小写</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -iname 不区分文件名的大小写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc -type f -size +10k -mtime +7 -iname &#39;*.conf&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+D+'" alt=""></p><h1 id="第三章-find-命令高级用法-⭐-难点" tabindex="-1">第三章：find 命令高级用法（⭐，难点） <a class="header-anchor" href="#第三章-find-命令高级用法-⭐-难点" aria-label="Permalink to &quot;第三章：find 命令高级用法（⭐，难点）&quot;">​</a></h1><h2 id="_3-1-概述" tabindex="-1">3.1 概述 <a class="header-anchor" href="#_3-1-概述" aria-label="Permalink to &quot;3.1 概述&quot;">​</a></h2><ul><li>find 命令可以和其它的命令配合使用，以便处理复杂的任务，如： <ul><li>① find + 简单命令（ls、head、less 、grep 等）：查看某些文件的详细信息、显示文件的内容、过滤等。</li><li>② find + 打包压缩命令（tar 等）：find 找出某些文件后进行压缩。</li><li>③ find + 复制或移动命令（cp、mv）：find 找出某些文件后将其进行复制或移动。</li></ul></li><li>环境准备：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find/linux{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">..10}.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+A+'" alt=""></p><h2 id="_3-2-find-简单命令" tabindex="-1">3.2 find + 简单命令 <a class="header-anchor" href="#_3-2-find-简单命令" aria-label="Permalink to &quot;3.2 find + 简单命令&quot;">​</a></h2><h3 id="_3-2-1-概述" tabindex="-1">3.2.1 概述 <a class="header-anchor" href="#_3-2-1-概述" aria-label="Permalink to &quot;3.2.1 概述&quot;">​</a></h3><ul><li>需求：通过 find 查询 /tmp/find 目录下以 <code>.txt</code> 结尾的文件的详细信息。</li></ul><blockquote><p>注意：</p><ul><li>① find 通常可以和 ls 、rm 、cat、head、grep 等命令组合使用。</li><li>② find 不要和交互式命令，如：vi、vim ，搭配使用。</li><li>③ 在 Linux 中，`` 和 <code>$()</code>一样都是<a href="https://aexiar.github.io/linux/notes/01_linux_basic/05_xdx/#_6-5-%E8%A1%A5%E5%85%85" target="_blank" rel="noreferrer">重定向</a>符号，里面的命令将会优先执行。</li></ul></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lah</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lah</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+P+'" alt=""></p><h3 id="_3-2-2-引出-xargs" tabindex="-1">3.2.2 引出 xargs <a class="header-anchor" href="#_3-2-2-引出-xargs" aria-label="Permalink to &quot;3.2.2 引出 xargs&quot;">​</a></h3><ul><li>如果上述的需求，我们使用管道符 <code>|</code> 来完成，如下所示：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lah</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+z+'" alt="image-20240207201558682"></p><ul><li>我们会发现很奇怪，结果完全不对，此时我们就需要 xargs 来解决，如下所示：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls -lah</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+L+'" alt="image-20240207201721264"></p><ul><li>再次回顾命令的格式，如下所示：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令（command）</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [参数](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arguments/parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>其命令格式说明：</li></ul><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">说明</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">命令</td><td style="text-align:left;">Linux 中通过<code>命令</code>控制整个操作系统。</td><td style="text-align:left;">通常而言，命令是单词或单词缩写。</td></tr><tr><td style="text-align:left;">选项</td><td style="text-align:left;">就是<code>功能</code>，不同的<code>选项</code>对应不同的<code>功能</code>。</td><td style="text-align:left;">通常而言，选项会使用加上 <code>-</code> 或 <code>--</code> 前缀。</td></tr><tr><td style="text-align:left;">参数</td><td style="text-align:left;">命令处理的<code>目标</code></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>注意⚠️：并不是所有的命令<code>都遵循</code>上述的格式，有些命令就只有命令，而没有选项或参数，如：<code>pwd</code> 等。</p></blockquote><ul><li>ls 命令的格式如下：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项]... [文件]...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>我们通常会这么使用，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lah</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+S+`" alt="image-20240207202000269"></p><ul><li>也会这么使用，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果文件的路径不写，默认是当前目录，即 .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lah</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+O+`" alt="image-20240207202101150"></p><blockquote><p>注意⚠️：ls 命令默认情况下，是不能读取标准输入的。</p></blockquote><ul><li>而 grep 命令的格式是这样的，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-i][-n][-v] </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;字符串&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [文件]...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：如果没有指定文件，则从标准输入中读取。</p></blockquote><ul><li>所以，对于 grep 而言，可以直接使用管道符，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为 grep 可以读取标准输入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+T+'" alt="image-20240207202309972"></p><ul><li>既然，ls 在默认情况下，不能读取标准输入；那么，就可以 xargs 将标准输入转换为命令行参数，即：</li></ul><p><img src="'+N+`" alt="image-20240207202811280"></p><ul><li>那么，xargs 的作用是什么？xargs 就是将<code>管道的标准输入</code>转换为<code>某些命令</code>的<code>命令行参数</code>，因为某些命令是不能读取标准输入的，如：ls 命令。</li><li>可能，你还是不能理解上面的逻辑，可以手动模拟下，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a b c d e f g</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">h i j k l m n</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">o p q</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">r s t</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">u v w x y z</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xargs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+G+`" alt=""></p><ul><li>所以，<code>| xargs</code> 就是通过这样的方式，将<code>上一个命令</code>的<code>标准输出</code>通过 <code>|xargs</code>转换为<code>单行 + 空格</code>的方式<code>添加到</code>命令的<code>参数位置</code>，进而完成某些命令不支持读取标准流，也能通过管道来使用。</li><li>默认情况下，管道是没有办法将<code>上一个命令</code>的<code>标准输出</code>转变为<code>下一个命令</code>的<code>参数</code>，即：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ls -lah &#39;/tmp/find/linux01.txt</span></span>
<span class="line"><span>/tmp/find/linux02.txt</span></span>
<span class="line"><span>/tmp/find/linux03.txt</span></span>
<span class="line"><span>/tmp/find/linux04.txt</span></span>
<span class="line"><span>/tmp/find/linux05.txt</span></span>
<span class="line"><span>/tmp/find/linux06.txt</span></span>
<span class="line"><span>/tmp/find/linux07.txt</span></span>
<span class="line"><span>/tmp/find/linux08.txt</span></span>
<span class="line"><span>^Cmp/find/linux09.txt</span></span>
<span class="line"><span>/tmp/find/linux10.txt&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="`+H+'" alt="image-20240207204545161"></p><ul><li>会导致传递失败，默认情况下，上一条命输出的内容就被丢弃；所以，就相当于如下的命令，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lah</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+$+'" alt="image-20240207204652694"></p><ul><li>所以，当然会显示<code>当前目录</code>下文件的<code>详细信息</code>了；解决方案，就是通过 <code>|xargs</code>将<code>上一个命令</code>的<code>标准输出</code>转换为<code>单行 + 空格</code>的方式<code>添加到</code>命令的<code>参数位置</code>，进而完成某些命令不支持读取标准流，也能通过<code>管道</code>来使用。</li></ul><h2 id="_3-3-find-打包压缩命令" tabindex="-1">3.3 find + 打包压缩命令 <a class="header-anchor" href="#_3-3-find-打包压缩命令" aria-label="Permalink to &quot;3.3 find + 打包压缩命令&quot;">​</a></h2><ul><li><p>需求：通过 find 查询 /tmp/find 目录下以 <code>.txt</code> 结尾的文件，并通过 tar 命令进行打包。</p></li><li><p>示例：</p></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zcvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find.tar.gz $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+K+'" alt=""></p><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tar -zcvf find.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Q+'" alt=""></p><h2 id="_3-4-find-复制或移动命令" tabindex="-1">3.4 find + 复制或移动命令 <a class="header-anchor" href="#_3-4-find-复制或移动命令" aria-label="Permalink to &quot;3.4 find + 复制或移动命令&quot;">​</a></h2><ul><li>需求：通过 find 查询 /tmp/find 目录下以 <code>.txt</code> 结尾的文件，并复制到 /tmp 目录下</li></ul><blockquote><p>注意⚠️：在使用 find + cp 或 mv 命令的时候，尽量选择 find + cp 组合，防止出现数据丢失等情况。</p></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Y+'" alt=""></p><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/find -type f -name &#39;*.txt&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp -t /tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+U+'" alt=""></p><h1 id="第四章-别名-⭐" tabindex="-1">第四章：别名（⭐） <a class="header-anchor" href="#第四章-别名-⭐" aria-label="Permalink to &quot;第四章：别名（⭐）&quot;">​</a></h1><h2 id="_4-1-概述" tabindex="-1">4.1 概述 <a class="header-anchor" href="#_4-1-概述" aria-label="Permalink to &quot;4.1 概述&quot;">​</a></h2><ul><li>Linux 中的<code>别名</code>是一种将<code>常用</code>或<code>复杂的命令</code>简化为<code>简短名称</code>的功能：当用户输入<code>别名</code>的时候，Linux 会自动将其替换为<code>完整的命令</code>。</li><li>在 AlmaLinux 中，最为常见的别名就是 <code>ll</code> ，相当于 <code>ls -l --color=auto</code>，即：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ls -l --color=auto&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Linux 中命令的<code>别名</code>的应用场景： <ul><li>① <code>命令简化</code>：将<code>长命令</code>简化为<code>短别名</code>，如：<code>ls -l</code> 简化为 <code>ll</code>。</li><li>② <code>防止误操作</code>：为<code>可能产生严重后果的命令（危险命令）</code>添加别名，以便<code>增加</code>确认步骤，如：<code>alias rm=&#39;rm -i&#39;</code>。</li><li>③ <code>命令组合</code>：将<code>一系列的命令</code>组合成一个<code>别名</code>，以便<code>快速</code>执行，如：<code>alias deploy=&#39;git pull &amp;&amp; npm install &amp;&amp; npm run build&#39;</code>。</li><li>④ <code>提高工作效率</code>：<code>为频繁执行</code>的命令创建别名，减少重复输入。</li></ul></li></ul><blockquote><p>注意⚠️：可以将<code>别名</code>理解为<code>命令</code>的<code>昵称</code>、<code>爱称</code>，如：孩子的小名---狗蛋、狗剩，QQ 账号的昵称 -- 天下无敌。</p></blockquote><ul><li>查看系统已有的别名：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alias</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Z+'" alt="image-20240207221805798"></p><ul><li>查看别名对应的完整命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ll</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+J+'" alt="image-20240207222049976"></p><h2 id="_4-2-临时设置别名" tabindex="-1">4.2 临时设置别名 <a class="header-anchor" href="#_4-2-临时设置别名" aria-label="Permalink to &quot;4.2 临时设置别名&quot;">​</a></h2><ul><li>在当前会话中，临时设置别名(重启或重新登录失效)：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 别名=&#39;命令&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：在别名存在的情况下，如果真的想要执行对应的命令，有如下的两种方式</p><ul><li>① 使用<code>命令</code>的<code>绝对路径</code>，如：<code>/bin/rm</code> 。</li><li>② 使用<code>\\别名</code>，如：<code>\\rm xxx</code>。</li></ul></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;echo rm is not found,please use mv&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+M+`" alt=""></p><h2 id="_4-3-永久设置别名" tabindex="-1">4.3 永久设置别名 <a class="header-anchor" href="#_4-3-永久设置别名" aria-label="Permalink to &quot;4.3 永久设置别名&quot;">​</a></h2><ul><li><p>如果要想别名在每次登录的时候都生效，则需要将其添加到 Shell 对应的配置文件中。</p></li><li><p>永久设置别名的步骤如下：</p><ul><li>① 修改配置文件：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;alias rm=&#39;echo rm is not found,please use mv&#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>② 让配置生效（加载配置）：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># source /etc/profile</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><blockquote><p>注意⚠️：</p><ul><li>① 对于 bash 而言，通常是 <code>~/.bashrc</code>；对于 zsh 而言，通常是 <code>~/.zshrc</code>。</li><li>② 可以通过在命令行输入 <code>echo $SHELL</code> 查看当前默认的 shell 。</li><li>③ <code>~/.bashrc</code>仅仅对当前用户有效，而 <code>/etc/profile</code> 对全局（所有用户）生效。</li><li>④ 如果要想<code>注释</code>配置文件 <code>~/.bashrc</code> 的别名信息，只需要修改此配置文件，在指定的别名前加上 <code>#</code>，再重新加载配置文件即可。</li></ul></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 备份</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc ~/.bashrc.back</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注释掉 alias rm=‘rm -i’，就是添加 # </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/alias rm/# alias rm/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将配置写入到配置文件中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;alias rm=&#39;echo rm is not found,please use mv&#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载配置文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+V+'" alt=""></p>',217),R=[I];function X(W,ss,is,es,as,ls){return e(),i("div",null,R)}const ps=s(j,[["render",X]]);export{ts as __pageData,ps as default};
