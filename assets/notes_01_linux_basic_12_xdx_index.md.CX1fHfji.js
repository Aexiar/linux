import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.BpgRCUtN.js";const l="/linux/assets/1.BXkApHoQ.png",n="/linux/assets/2.DhKCFIf-.gif",t="/linux/assets/3.AABCT9YL.gif",p="/linux/assets/4.QhskbILM.gif",r="/linux/assets/5.C0SMWfGS.gif",h="/linux/assets/6.BSQ0_IBA.png",d="/linux/assets/7.Vw_OyriW.gif",c="/linux/assets/8.BIdHWeqX.gif",o="/linux/assets/9.BosRfdUW.png",u="/linux/assets/10.CLlID6PH.gif",k="/linux/assets/11.CdmqG3k4.gif",g="/linux/assets/12.DIhtgCf9.gif",m="/linux/assets/13.By6Wm1J4.gif",b="/linux/assets/14.QoGs9z8v.gif",y="/linux/assets/15.Wp0d0fI8.gif",F="/linux/assets/16.C5EI7grG.gif",v="/linux/assets/17.CbHOTcJQ.gif",C="/linux/assets/18.BZ_HMD3n.gif",x="/linux/assets/19.BDV0Zd7Y.gif",B="/linux/assets/20.PbDW2PK_.gif",_="/linux/assets/21.Cjqnc87J.gif",E="/linux/assets/22.BiN7ZOKy.gif",f="/linux/assets/23.DA0BU31i.gif",q="/linux/assets/24.9vhD97RK.gif",w="/linux/assets/25.B8GlIYJG.gif",D="/linux/assets/26.NSkABiba.gif",P="/linux/assets/27.CPQf8aHI.gif",A="/linux/assets/28.CabeCA9O.gif",L="/linux/assets/29.B_gTjkv0.gif",G="/linux/assets/30.CRR_bbHs.gif",S="/linux/assets/31.Dx0Ve3JI.gif",M="/linux/assets/32.BsDCUYbq.png",N="/linux/assets/33.C1wCAnGW.png",R="/linux/assets/34.D08Cxfad.gif",z="/linux/assets/35.C6qIBN5-.gif",I="/linux/assets/36.DmeaMKmH.gif",U="/linux/assets/37.Dao2r4F2.gif",O="/linux/assets/38.DWLXj8v8.gif",$="/linux/assets/39.kEFMuDEt.gif",T="/linux/assets/40.JeV0HCPe.gif",H="/linux/assets/41.8t6h5Ar0.gif",J="/linux/assets/42.DQF-cGP-.gif",K="/linux/assets/43.Bs6D3OIg.png",W="/linux/assets/44.DsXJwmSP.png",X="/linux/assets/45.C1LNLxOL.png",Y="/linux/assets/46.BpHIsmnP.png",Q="/linux/assets/47.KL3KQPxE.png",j="/linux/assets/48.DiFlUcGf.png",V="/linux/assets/49.Cq_BV5GZ.png",Z="/linux/assets/50.BLchxdNt.png",ss="/linux/assets/51.DFGfI242.png",is="/linux/assets/52.DWk-Oqo-.png",as="/linux/assets/53.CFSpi_X5.png",es="/linux/assets/54.Ck7bBmqp.png",ls="/linux/assets/55.BsraAXE6.png",ns="/linux/assets/56.C5Wws8SM.png",ts="/linux/assets/57.C6PE0OXY.png",ps="/linux/assets/58.B87yTtrX.png",rs="/linux/assets/59.BTwENvax.png",hs="/linux/assets/60.CthtCSlD.png",ds="/linux/assets/61.CJtiJm8l.png",cs="/linux/assets/62.Dt4SPXRB.png",os="/linux/assets/63.DvcQ8zJT.png",us="/linux/assets/64.BoMB5bMa.png",ks="/linux/assets/65.B8dyNa9v.gif",gs="/linux/assets/66.B_3yTnZl.gif",ms="/linux/assets/67.ByqO3E3r.gif",bs="/linux/assets/68.sAMK_tbb.gif",Ds=JSON.parse('{"title":"第一章：Linux 软件包概述（⭐）","description":"","frontmatter":{},"headers":[],"relativePath":"notes/01_linux_basic/12_xdx/index.md","filePath":"notes/01_linux_basic/12_xdx/index.md","lastUpdated":1709987838000}'),ys={name:"notes/01_linux_basic/12_xdx/index.md"},Fs=e('<h1 id="第一章-linux-软件包概述-⭐" tabindex="-1">第一章：Linux 软件包概述（⭐） <a class="header-anchor" href="#第一章-linux-软件包概述-⭐" aria-label="Permalink to &quot;第一章：Linux 软件包概述（⭐）&quot;">​</a></h1><h2 id="_1-1-主流-linux-发行版本分类" tabindex="-1">1.1 主流 Linux 发行版本分类 <a class="header-anchor" href="#_1-1-主流-linux-发行版本分类" aria-label="Permalink to &quot;1.1 主流 Linux 发行版本分类&quot;">​</a></h2><ul><li>在实际工作中，主流的 Linux 发行版本分类如下：</li></ul><p><img src="'+l+`" alt="image-20240219110359293"></p><blockquote><p>注意⚠️：</p><ul><li>① 对于 RedHat（红帽系）而言，<code>软件包</code>的格式是 <code>rpm</code> 格式。</li><li>② 对于 Debian（Debian 系）而言，<code>软件包</code>的格式是 <code>deb</code> 格式。</li></ul></blockquote><h2 id="_1-2-linux-中软件包常见的安装方式" tabindex="-1">1.2 Linux 中软件包常见的安装方式 <a class="header-anchor" href="#_1-2-linux-中软件包常见的安装方式" aria-label="Permalink to &quot;1.2 Linux 中软件包常见的安装方式&quot;">​</a></h2><ul><li><p>在 Linux 中软件包常见的安装方式有：</p><ul><li>① yum（apt-get）安装。</li><li>② rpm（depk）安装。</li><li>③ 二进制安装。</li><li>④ 编译安装。</li></ul></li><li><p>它们之间的区别如下：</p></li></ul><table><thead><tr><th>软件安装方式</th><th>解释说明</th><th>自动化程度</th><th>应用场景</th><th>安装方式推荐（排序）</th></tr></thead><tbody><tr><td>yum（apt-get）安装</td><td>通过网络下载安装；如果有依赖，会自动安装依赖。</td><td>全自动</td><td>大部分场景都可以使用；如果是内网，如果自建 yum 仓库。</td><td>1️⃣</td></tr><tr><td>rpm（depk）安装</td><td>手动安装 rpm 包；如果缺少依赖，需要根据提示，自己手动解决。</td><td>半自动</td><td>没有网络的情况、依赖较少、误删除一些软件包的情况。</td><td>2️⃣</td></tr><tr><td>二进制安装</td><td>类似于 win 中的绿色软件，解压就可以使用；但是，可能需要准备软件所需要的环境。</td><td>手动</td><td>如果软件没有提供 yum 或 rpm 安装方式，则选择二进制安装，如：maven 。</td><td>3️⃣</td></tr><tr><td>编译（源码）安装</td><td>自定义安装，需要自己编译和安装，流程较长，比较繁琐。</td><td>完全手动</td><td>如果需要自定义安装或者上述安装方式都不存在，则选择编译安装。</td><td>4️⃣</td></tr></tbody></table><h1 id="第二章-rpm-安装-⭐" tabindex="-1">第二章：rpm 安装（⭐） <a class="header-anchor" href="#第二章-rpm-安装-⭐" aria-label="Permalink to &quot;第二章：rpm 安装（⭐）&quot;">​</a></h1><h2 id="_2-1-概述" tabindex="-1">2.1 概述 <a class="header-anchor" href="#_2-1-概述" aria-label="Permalink to &quot;2.1 概述&quot;">​</a></h2><ul><li><code>rpm（Redhat Package Manager）</code> 命令是 <code>RPM</code> 软件包的管理工具。<code>rpm</code> 原本是 <code>Red Hat Linux</code> 发行版专门用来管理 <code>Linux</code> 各项套件的程序，由于它遵循 <code>GPL</code> 规则且功能强大方便，因而广受欢迎，逐渐受到其他发行版的采用。</li><li><code>RPM</code> 套件管理方式的出现，让 <code>Linux</code> 易于安装，升级，间接提升了 <code>Linux</code> 的适用度。</li></ul><h2 id="_2-2-扫清概念-软件包和命令的区别" tabindex="-1">2.2 扫清概念（软件包和命令的区别） <a class="header-anchor" href="#_2-2-扫清概念-软件包和命令的区别" aria-label="Permalink to &quot;2.2 扫清概念（软件包和命令的区别）&quot;">​</a></h2><ul><li>在 Linux 系统中，软件包（Package）和命令（Command）是两个不同的概念，它们在系统管理和使用中扮演着不同的角色。</li><li><strong>软件包（Package）</strong>： <ul><li><code>软件包</code>是 Linux 系统中用于分发和安装软件的一种方式。它通常包含了<code>一个</code>或<code>多个程序</code>、<code>库文件</code>、<code>配置文件</code>以及<code>可能需要的其他资源</code>。</li><li>软件包可以是源代码包（Source Package），也可以是编译后的二进制包（Binary Package）。</li><li>在不同的 Linux 发行版中，软件包的格式可能有所不同，例如：Debian 和 Ubuntu 使用的是 <code>.deb</code> 格式，而 Red Hat、CentOS 和 Fedora 使用的是 <code>.rpm</code> 格式。</li><li>安装软件包，通常意味着将软件的二进制文件和相关资源放置到系统的正确位置，以便系统可以识别和运行这些软件。</li></ul></li><li><strong>命令（Command）</strong>： <ul><li>命令是用户在 Linux 命令行界面（CLI）中输入的一系列字符，用于执行特定的任务或操作。</li><li>命令可以是系统内置的，也可以是由软件包提供的，例如：<code>ls</code> 是一个列出目录内容的命令，<code>apt-get</code> 是 Debian 和 Ubuntu 系统中用于管理软件包的命令。</li><li>命令通常与特定的软件包相关联，因为它们是软件包的一部分，安装了相应的软件包后，我们就可以使用这些命令。</li></ul></li></ul><blockquote><p>温馨提示ℹ️：</p><ul><li>① 软件包是软件的集合，包含了运行软件所需的所有文件（可执行文件、库文件、配置文件、帮助文档、脚本、数据文件等），而命令（通常是可执行文件）是用户与系统交互的工具，用于执行软件包中的程序，是软件包的一部分。</li><li>② 在Linux中，我们通常需要先安装软件包，然后才能使用其中的命令。</li><li>③ <code>软件包 != 命令</code>，如：<code>ifconfig</code> 命令的软件包是 <code>net-tools</code> ，<code>rz</code> 和 <code>sz</code> 命令的软件包是 <code>lrzsz</code>。</li></ul></blockquote><h2 id="_2-3-rpm-安装软件包" tabindex="-1">2.3 rpm 安装软件包 <a class="header-anchor" href="#_2-3-rpm-安装软件包" aria-label="Permalink to &quot;2.3 rpm 安装软件包&quot;">​</a></h2><h3 id="_2-3-1-概述" tabindex="-1">2.3.1 概述 <a class="header-anchor" href="#_2-3-1-概述" aria-label="Permalink to &quot;2.3.1 概述&quot;">​</a></h3><ul><li>rpm 安装软件包，无非增（安装）删（卸载）改（升级）查（查询），即：</li></ul><table><thead><tr><th>功能</th><th>命令</th><th>选项含义</th></tr></thead><tbody><tr><td>增（安装）</td><td><code>rpm -ivh xxx.rpm</code></td><td><code>-i</code>， <code>--install</code>：安装软件包。 <br><code>-v</code>，<code>--verbose</code> ：安装的时候显示详细信息。 <br><code>-h</code>，<code>--hash</code>：软件包安装的时候列出哈希标记，通常和 <code>-v</code> 配合使用。</td></tr><tr><td>删（卸载）</td><td><code>rpm -e xxx.rpm --nodeps</code></td><td><code>-e</code>，<code>--erase</code>：清除（卸载）软件包，eraser 是 erase 的名词，即橡皮，所以 erase 是擦除的意思。 <br><code>--nodeps</code>：不验证软件包依赖，有的时候卸载不了，就需要此参数。</td></tr><tr><td>改（升级）</td><td><code>rpm -Uvh xxx.rpm</code></td><td><code>-U</code>，<code>--upgrade</code>：升级软件包。<br><code>-v</code>，<code>--verbose</code> ：安装的时候显示详细信息。 <br><code>-h</code>，<code>--hash</code>：软件包安装的时候列出哈希标记，通常和 <code>-v</code> 配合使用。</td></tr><tr><td>查（查询）</td><td>\`rpm -qa</td><td>grep xxx\`</td></tr><tr><td></td><td><code>rpm -ql xxx</code></td><td><code>-q</code>，<code>--query</code> ：查询。<br><code>-l</code>，<code>--list</code>：列出安装到系统中软件包中的内容（绝对路径），如：命令、配置文件等。</td></tr><tr><td></td><td><code>rpm -qf $(which xxx)</code></td><td><code>-q</code>，<code>--query</code> ：查询。<br><code>-f</code>，<code>--file</code>：根据命令或文件的绝对路径，查询对应的软件包。</td></tr></tbody></table><h3 id="_2-3-2-增-安装" tabindex="-1">2.3.2 增（安装） <a class="header-anchor" href="#_2-3-2-增-安装" aria-label="Permalink to &quot;2.3.2 增（安装）&quot;">​</a></h3><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ivh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx.rpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载软件包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-check-certificate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/rhel/9/x86_64/zabbix-agent2-6.0.6-2.el9.x86_64.rpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖（后面可以通过 yum 来解决软件包依赖和查找依赖）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install pcre2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到指定目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ivh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zabbix-agent2-6.0.6-2.el9.x86_64.rpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+n+`" alt=""></p><h3 id="_2-3-3-查-查询" tabindex="-1">2.3.3 查（查询） <a class="header-anchor" href="#_2-3-3-查-查询" aria-label="Permalink to &quot;2.3.3 查（查询）&quot;">​</a></h3><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询是否安装成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -qa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出安装到系统中软件包中的内容（绝对路径），如：命令、配置文件等</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 根据命令或文件的绝对路径，查询对应的软件包（了解，后期通过 yum 来实现）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -qf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>示例：查询是否安装成功</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -qa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zabbix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+t+'" alt=""></p><ul><li>示例：列出安装到系统中软件包中的内容（绝对路径），如：命令、配置文件等</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zabbix-agent2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+p+'" alt=""></p><ul><li>示例：根据命令或文件的绝对路径，查询对应的软件包</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -qf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ifconfig)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+r+'" alt=""></p><h3 id="_2-3-4-linux-中软件包的格式" tabindex="-1">2.3.4 Linux 中软件包的格式 <a class="header-anchor" href="#_2-3-4-linux-中软件包的格式" aria-label="Permalink to &quot;2.3.4 Linux 中软件包的格式&quot;">​</a></h3><ul><li>RedHat（红帽系）的软件包格式如下：</li></ul><p><img src="'+h+`" alt="image-20240219141800345"></p><h3 id="_2-3-5-改-升级" tabindex="-1">2.3.5 改（升级） <a class="header-anchor" href="#_2-3-5-改-升级" aria-label="Permalink to &quot;2.3.5 改（升级）&quot;">​</a></h3><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 适用于小版本的升级</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Uvh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx.rpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 通常，<code>rpm -Uvh xxx.rpm</code> 适用于小版本的升级。</li><li>② 在实际工作的时候，升级需要经过严格的测试（找一台裸机模拟环境进行升级）。</li></ul></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载软件包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-check-certificate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/rhel/9/x86_64/zabbix-agent2-6.0.7-1.el9.x86_64.rpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到指定目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 升级</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Uvh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zabbix-agent2-6.0.7-1.el9.x86_64.rpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+d+`" alt=""></p><h3 id="_2-3-6-删-卸载" tabindex="-1">2.3.6 删（卸载） <a class="header-anchor" href="#_2-3-6-删-卸载" aria-label="Permalink to &quot;2.3.6 删（卸载）&quot;">​</a></h3><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># xxx 是软件包的名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx --nodeps</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zabbix-agent2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+c+'" alt=""></p><h1 id="第三章-yum-安装-⭐" tabindex="-1">第三章：yum 安装（⭐） <a class="header-anchor" href="#第三章-yum-安装-⭐" aria-label="Permalink to &quot;第三章：yum 安装（⭐）&quot;">​</a></h1><h2 id="_3-1-概述" tabindex="-1">3.1 概述 <a class="header-anchor" href="#_3-1-概述" aria-label="Permalink to &quot;3.1 概述&quot;">​</a></h2><ul><li><code>yum</code> 命令是在 <code>Fedora</code> 和 <code>RedHat</code> 以及 <code>SUSE</code> 中基于 <code>rpm</code> 的软件包管理器，它可以使系统管理人员交互和自动化地更新与管理 <code>RPM</code> 软件包，能够从指定的服务器自动下载 <code>RPM</code> 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</li></ul><blockquote><p>注意⚠️：</p><ul><li>① 在 AlmaLinux 8+ 之后的版本，其实更推荐使用 dnf 命令，因为其性能相对于 yum 来说更高。</li><li>② 无需担心，dnf 命令的<code>选项</code>、<code>参数</code>和 yum 命令的<code>选项</code>、<code>参数</code>几乎一样，在使用的时候，只需要将 yum 替换为 dnf 即可。</li></ul></blockquote><h2 id="_3-2-yum-安装软件包的流程" tabindex="-1">3.2 yum 安装软件包的流程 <a class="header-anchor" href="#_3-2-yum-安装软件包的流程" aria-label="Permalink to &quot;3.2 yum 安装软件包的流程&quot;">​</a></h2><h3 id="_3-2-1-概述" tabindex="-1">3.2.1 概述 <a class="header-anchor" href="#_3-2-1-概述" aria-label="Permalink to &quot;3.2.1 概述&quot;">​</a></h3><ul><li>通常而言，我们都是使用 yum 命令来安装软件包的；但是，在安装软件包的过程中，yum 命令会和 yum 源（仓库）进行交互，并确保了软件包的安装、更新和依赖关系的自动解决，即：</li></ul><p><img src="'+o+`" alt="image-20240219151504276"></p><h3 id="_3-2-2-yum-源配置" tabindex="-1">3.2.2 yum 源配置 <a class="header-anchor" href="#_3-2-2-yum-源配置" aria-label="Permalink to &quot;3.2.2 yum 源配置&quot;">​</a></h3><ul><li>查看：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/xxx.repo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置文件格式</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[baseos] # 源的名称</span></span>
<span class="line"><span>name=AlmaLinux $releasever - BaseOS # 描述信息</span></span>
<span class="line"><span>mirrorlist=https://mirrors.almalinux.org/mirrorlist/$releasever/baseos # yum 仓库镜像列表，会自动进行切换</span></span>
<span class="line"><span># baseurl=https://repo.almalinux.org/almalinux/$releasever/BaseOS/$basearch/os/ # 指向一个固定的地址</span></span>
<span class="line"><span>enabled=1 # 启动状态：1 开启；0 关闭</span></span>
<span class="line"><span>gpgcheck=1 # GPG 检查，1 表示在安装软件包时会进行 GPG 签名验证，确保软件包的完整性和来源的可靠性。</span></span>
<span class="line"><span>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-AlmaLinux-9 # GPG 密钥，用于验证软件包的签名</span></span>
<span class="line"><span>countme=1 # 计数器，1 表示这个软件源应该被计入软件包管理器的统计中</span></span>
<span class="line"><span>metadata_expire=86400 # 元数据过期时间，86400 秒表示软件源的元数据（如软件包列表）在没有更新的情况下可以保持多久</span></span>
<span class="line"><span>enabled_metadata=1 # 启用元数据， 1 表示启用元数据的自动更新</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 如果是虚拟机或私有云，可能需要配置 yum 源；不过，现在默认配置的 mirrorlist 会动态切换 yum 仓库源到指定国家，速度也还是可以的。</li><li>② 如果是公有云，通常都是配置好的。</li></ul></blockquote><ul><li>修改为阿里云的 yum 镜像源：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 备份并替换默认源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s|^mirrorlist=|#mirrorlist=|g&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s|^# baseurl=https://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -i.bak</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     /etc/yum.repos.d/almalinux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.repo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成缓存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> makecache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-2-3-yum-命令配置文件" tabindex="-1">3.2.3 yum 命令配置文件 <a class="header-anchor" href="#_3-2-3-yum-命令配置文件" aria-label="Permalink to &quot;3.2.3 yum 命令配置文件&quot;">​</a></h3><ul><li>查看：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置文件格式：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[main]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cachedir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/cache/yum/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$basearch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$releasever </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 缓存目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keepcache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> # 是否保留缓存, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示不保留缓存, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示保留缓存，默认是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logfile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/log/yum.log # yum 操作的日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gpgcheck</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">installonly_limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clean_requirements_on_remove</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">best</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skip_if_unavailable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">False</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 可以通过 <code>man yum.conf</code> 命令查看 yum.conf 中的所有可用的配置选项和详细描述。</li><li>② 通常情况下，我们不会修改该文件，如果在内网环境中，我们通常会搭建 yum 私服（nexus3），并指定 yum 源为 yum 私服（nexus3）。</li></ul></blockquote><h2 id="_3-3-yum-安装软件包" tabindex="-1">3.3 yum 安装软件包 <a class="header-anchor" href="#_3-3-yum-安装软件包" aria-label="Permalink to &quot;3.3 yum 安装软件包&quot;">​</a></h2><h3 id="_3-3-1-概述" tabindex="-1">3.3.1 概述 <a class="header-anchor" href="#_3-3-1-概述" aria-label="Permalink to &quot;3.3.1 概述&quot;">​</a></h3><ul><li>yum 安装软件包，无非增（安装）删（卸载）改（升级）查（查询），即：</li></ul><table><thead><tr><th>功能</th><th>命令</th><th>备注</th></tr></thead><tbody><tr><td>增（安装）</td><td><code>yum -y install xxx</code></td><td></td></tr><tr><td></td><td><code>yum -y groupinstall xxx</code></td><td>安装程序组</td></tr><tr><td>删（卸载）</td><td><code>yum -y remove xxx</code></td><td>卸载（删除）软件</td></tr><tr><td></td><td><code>yum -y groupremove xxx</code></td><td>卸载程序组</td></tr><tr><td>改（升级）</td><td>\`yum -y update</td><td>upgrade xxx\`</td></tr><tr><td>查（查询）</td><td><code>yum repolist [--all]</code></td><td>查看已启用的 yum 仓库，默认。<br><code>--all</code> 选项表示查询所有仓库。</td></tr><tr><td></td><td><code>yum grouplist [--installed]</code></td><td>查询所有程序组，默认。<br><code>--installed</code> 选项表示查询已安装的程序组。</td></tr><tr><td></td><td><code>yum list [--installed]</code></td><td>查询所有的软件包，包括仓库中的，默认。<br><code>--installed</code> 选项表示查询已经安装到本地的软件包。</td></tr><tr><td></td><td><code>yum provides xxx</code></td><td>查找提供指定内容的软件包，是 <code>rpm -qf $(which xxx)</code>的升级版本。</td></tr><tr><td>yum 仓库</td><td><code>yum config-manager --enable 仓库名称</code></td><td>启用仓库</td></tr><tr><td></td><td><code>yum config-manager --disable 仓库名称</code></td><td>禁用仓库</td></tr><tr><td>yum 缓存</td><td><code>yum clean all</code></td><td>释放磁盘空间并保持 YUM 的缓存数据最新，包括：清除缓存、清理头文件、清理过期的元数据、清理过期的软件包。</td></tr><tr><td></td><td><code>yum makecache</code></td><td>构建缓存</td></tr></tbody></table><h3 id="_3-3-2-增-安装" tabindex="-1">3.3.2 增（安装） <a class="header-anchor" href="#_3-3-2-增-安装" aria-label="Permalink to &quot;3.3.2 增（安装）&quot;">​</a></h3><h4 id="_3-3-2-1-安装软件包" tabindex="-1">3.3.2.1 安装软件包 <a class="header-anchor" href="#_3-3-2-1-安装软件包" aria-label="Permalink to &quot;3.3.2.1 安装软件包&quot;">​</a></h4><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+u+`" alt=""></p><h4 id="_3-3-2-2-安装程序组" tabindex="-1">3.3.2.2 安装程序组 <a class="header-anchor" href="#_3-3-2-2-安装程序组" aria-label="Permalink to &quot;3.3.2.2 安装程序组&quot;">​</a></h4><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装程序组，可以通过 yum grouplist 查询所有的程序组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupinstall xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 在 Linux系统中，程序组（Software Group）是一个方便用户管理和安装相关软件包的<code>集合</code>。</li><li>② 程序组通常包含了一组协同工作以提供特定功能或服务的软件包。</li><li>③ 这种分组方式使得用户可以更容易地安装、更新或卸载整个功能集合，而不需要单独处理每个软件包。</li></ul></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupinstall &#39;Development Tools&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+k+'" alt=""></p><h3 id="_3-3-3-查-查询" tabindex="-1">3.3.3 查（查询） <a class="header-anchor" href="#_3-3-3-查-查询" aria-label="Permalink to &quot;3.3.3 查（查询）&quot;">​</a></h3><h4 id="_3-3-3-1-查看-yum-仓库" tabindex="-1">3.3.3.1 查看 yum 仓库 <a class="header-anchor" href="#_3-3-3-1-查看-yum-仓库" aria-label="Permalink to &quot;3.3.3.1 查看 yum 仓库&quot;">​</a></h4><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repolist [--all]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>功能：查询已启用的 yum 仓库。</p></li><li><p>选项：</p><ul><li><code>--all</code>：查询所有的 yum 仓库。</li></ul></li><li><p>示例：查询已启用的 yum 仓库</p></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repolist</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+g+'" alt=""></p><ul><li>示例：查询所有的 yum 仓库</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repolist --all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+m+'" alt=""></p><ul><li>示例：安装 epel 仓库</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install epel-release</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+b+'" alt=""></p><h4 id="_3-3-3-2-查询程序组" tabindex="-1">3.3.3.2 查询程序组 <a class="header-anchor" href="#_3-3-3-2-查询程序组" aria-label="Permalink to &quot;3.3.3.2 查询程序组&quot;">​</a></h4><ul><li>查询所有程序组命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grouplist</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>查询已安装程序组命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grouplist --installed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 需要英文环境，不然显示的程序组的名称是中文（如果默认的 locale 就是中文）。</li><li>② 下面的示例，我使用英文环境来测试。</li></ul></blockquote><ul><li>示例：查询所有程序组</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grouplist</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+y+'" alt=""></p><ul><li>示例：查询已安装程序组</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grouplist --installed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+F+'" alt=""></p><h4 id="_3-3-3-3-查询软件包" tabindex="-1">3.3.3.3 查询软件包 <a class="header-anchor" href="#_3-3-3-3-查询软件包" aria-label="Permalink to &quot;3.3.3.3 查询软件包&quot;">​</a></h4><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list [--installed]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>功能：查询软件包，包括 yum 仓库中的。</p></li><li><p>选项：</p><ul><li><code>--installed</code>：查询安装到本地的软件包。</li></ul></li><li><p>示例：查询 tree</p></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+v+'" alt=""></p><ul><li>示例：查询已安装到本地的软件包</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list --installed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+C+'" alt=""></p><h4 id="_3-3-3-4-查询软件包" tabindex="-1">3.3.3.4 查询软件包 <a class="header-anchor" href="#_3-3-3-4-查询软件包" aria-label="Permalink to &quot;3.3.3.4 查询软件包&quot;">​</a></h4><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provides xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>功能：根据指定命令或文件查询对应的软件包。</li></ul><blockquote><p>注意⚠️：该命令是 <code>rpm -qf $(which xxx)</code>的升级版本，强烈使用！！！因为没有先安装指定的软件包的前提限制了。</p></blockquote><ul><li>示例：查询 <code>ifconfig</code>命令 对应的软件包</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provides ifconfig</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+x+'" alt=""></p><ul><li>示例：查询 <code>tree</code>命令 对应的软件包</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provides tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+B+'" alt=""></p><h3 id="_3-3-4-仓库-启用和禁用" tabindex="-1">3.3.4 仓库（启用和禁用） <a class="header-anchor" href="#_3-3-4-仓库-启用和禁用" aria-label="Permalink to &quot;3.3.4 仓库（启用和禁用）&quot;">​</a></h3><ul><li>启用仓库命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config-manager --enable 仓库名称</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>禁用仓库命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config-manager --disable 仓库名称</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 需要在 <code>/etc/yum.repo.d/</code> 下配置有 <code>xxx.repo</code> 文件。</li><li>② 如果不是系统内置，还需要通过 <code>yum -y makecache</code> 更新本地缓存。</li><li>③ 启用仓库后，最好使用 <code>yum -y makecache</code> 更新本地缓存，以便进行软件包的查询。</li></ul></blockquote><ul><li>示例：启用仓库</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config-manager --enable crb devel</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+_+'" alt=""></p><ul><li>示例：禁用仓库</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config-manager --disable crb devel</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+E+'" alt=""></p><h3 id="_3-3-5-改-更新" tabindex="-1">3.3.5 改（更新） <a class="header-anchor" href="#_3-3-5-改-更新" aria-label="Permalink to &quot;3.3.5 改（更新）&quot;">​</a></h3><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update [软件包] [--exclude=软件包] [--disableexcludes=repo]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>功能：如果不写软件包，会更新内核以及软件包。</li><li>选项： <ul><li><code>--exclude=软件包</code>：更新的时候排除某些软件包。</li><li><code>--disableexcludes=repo</code>：禁止排除某些仓库。</li></ul></li></ul><blockquote><p>注意⚠️：在生产环境中搭建 kubernetes 集群的时候，我们需要禁止内核以及 kubernetes 组件的更新，有如下的解决方案：</p><ul><li>① 临时解决方案，使用 <code>yum -y update --exclude=kernel* --exclude=kubelet --exclude=kubeadm --exclude=kubectl --exclude=docker-ce*</code> 命令。</li><li>② 永久方案，在 <code>/etc/yum.conf</code> 文件的最后一行添加 <code>exclude=kernel* kubelet kubeadm kubectl docker-ce* </code>。</li></ul></blockquote><ul><li>示例：更新软件，排除内核</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update --exclude=kernel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+f+'" alt=""></p><h3 id="_3-3-6-删-卸载" tabindex="-1">3.3.6 删（卸载） <a class="header-anchor" href="#_3-3-6-删-卸载" aria-label="Permalink to &quot;3.3.6 删（卸载）&quot;">​</a></h3><ul><li>命令：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove 软件包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：删除需要谨慎，生产环境切勿随意删除软件包；如果一定要删除，可以使用 <code>rpm -e xxx</code> 命令。</p></blockquote><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+q+'" alt=""></p><h1 id="第四章-编译-源码-安装-⭐" tabindex="-1">第四章：编译（源码）安装（⭐） <a class="header-anchor" href="#第四章-编译-源码-安装-⭐" aria-label="Permalink to &quot;第四章：编译（源码）安装（⭐）&quot;">​</a></h1><h2 id="_4-1-概述" tabindex="-1">4.1 概述 <a class="header-anchor" href="#_4-1-概述" aria-label="Permalink to &quot;4.1 概述&quot;">​</a></h2><ul><li>很多 Linux 上的软件都是使用 C 语言写的，为了简化跨平台构建，很多 C 语言项目使用了 GNU Autotools 工具链来进行构建。</li><li>GNU Autotools 工具链是一个自动化的构建系统，包括了：<code>autoconf</code>、<code>automake</code> 和 <code>libtool</code> 等工具，通过它可以很容易将源代码在在不同的操作系统和编译环境中进行编译和安装。</li><li>GNU Autotools 工具链配置、编译和安装过程如下： <ul><li>① <strong><code>配置</code></strong>：使用 <code>configure</code> 脚本来检查系统环境并生成 <code>Makefile</code>。这个脚本会根据你的系统配置（如：是否支持 SSL、是否安装了 PCRE 和 Zlib 、安装到那个目录，默认是 /usr/local 等）来定制 <code>Makefile</code>。</li><li>② <strong><code>编译</code></strong>：使用 <code>make</code> 命令根据 <code>Makefile</code> 编译 C 语言源代码，生成的通常是可执行文件（executables）、静态库（static libraries）、动态库（shared libraries）或目标文件（object files），具体取决于项目的构建配置和 <code>Makefile</code> 中定义的规则。</li><li>③ <strong><code>安装</code></strong>：使用 <code>make install</code> 命令将编译好的可执行文件、库文件、头文件等安装到系统的标准路径中。</li></ul></li></ul><blockquote><p>注意⚠️：Nginx 是一个用 C 语言编写的项目，其就是使用 GNU Autotools 工具链进行项目构建的。</p></blockquote><h2 id="_4-2-安装-nginx" tabindex="-1">4.2 安装 NGINX <a class="header-anchor" href="#_4-2-安装-nginx" aria-label="Permalink to &quot;4.2 安装 NGINX&quot;">​</a></h2><ul><li>下载源码：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp https://freenginx.org/download/nginx-1.24.0.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+w+'" alt=""></p><ul><li>安装依赖：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install gcc gcc-c++  autoconf automake make pcre pcre-devel zlib zlib-devel openssl openssl-devel</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+D+'" alt=""></p><ul><li>解压：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-1.24.0.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+P+'" alt=""></p><ul><li>配置：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-1.24.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+A+'" alt=""></p><ul><li>编译：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+L+'" alt=""></p><ul><li>安装：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+G+'" alt=""></p><ul><li>启动并测试：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/nginx/sbin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://127.0.0.1:80</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+S+'" alt=""></p><h1 id="第五章-使用-nexus3-搭建-yum-私有仓库-⭐" tabindex="-1">第五章：使用 nexus3 搭建 yum 私有仓库（⭐） <a class="header-anchor" href="#第五章-使用-nexus3-搭建-yum-私有仓库-⭐" aria-label="Permalink to &quot;第五章：使用 nexus3 搭建 yum 私有仓库（⭐）&quot;">​</a></h1><h2 id="_5-1-安装-nexus3" tabindex="-1">5.1 安装 nexus3 <a class="header-anchor" href="#_5-1-安装-nexus3" aria-label="Permalink to &quot;5.1 安装 nexus3&quot;">​</a></h2><h3 id="_5-1-1-概述" tabindex="-1">5.1.1 概述 <a class="header-anchor" href="#_5-1-1-概述" aria-label="Permalink to &quot;5.1.1 概述&quot;">​</a></h3><ul><li>nexus3 是用 Java 语言构建的集中式组件仓库，它支持各种软件包，如：Maven、YUM、npm 等。</li></ul><p><img src="'+M+'" alt="image-20240309095943990"></p><blockquote><p>注意⚠️：nexus3 的下载地址是<a href="https://help.sonatype.com/en/download-archives---repository-manager-3.html" target="_blank" rel="noreferrer">这里</a>。</p></blockquote><ul><li>目前的架构如下：</li></ul><p><img src="'+N+'" alt="image-20240309133612792"></p><blockquote><p>注意⚠️：nexus3 的主要功能和应用场景如下：</p><ul><li>① <strong>中央仓库缓存</strong>：Nexus3 可以作为中央仓库，如：Maven Central 的缓存服务器，提高内部网络中构建和依赖下载的速度。通过设置代理仓库，可以减少对外部网络的依赖，同时节省带宽。</li><li>② <strong>私有仓库</strong>：开发者可以在 Nexus3 中创建私有仓库，用于存储公司内部开发的库和依赖。这有助于保护知识产权，同时方便内部团队共享和重用代码。</li><li>③ <strong>依赖管理</strong>：Nexus3 提供了对依赖的管理和分发功能，可以帮助团队管理项目依赖，确保依赖的一致性和安全性。</li><li>④ <strong>Docker 镜像仓库</strong>：Nexus3 支持 Docker 镜像的存储和分发，这对于容器化应用的构建和部署非常有用。它可以作为 Docker Registry 的私有替代品。</li><li>⑤ <strong>权限管理</strong>：Nexus3 提供了细粒度的权限控制，允许管理员根据用户和角色设置访问权限，确保资源的安全性。</li><li>⑥ <strong>仓库类型支持</strong>：除了 Maven 和 Docker，Nexus3 还支持 npm、Bower、RubyGems 等多种仓库类型，使其成为一个多功能的仓库管理平台。</li><li>⑦ ……</li></ul></blockquote><h3 id="_5-1-2-安装并启动" tabindex="-1">5.1.2 安装并启动 <a class="header-anchor" href="#_5-1-2-安装并启动" aria-label="Permalink to &quot;5.1.2 安装并启动&quot;">​</a></h3><ul><li>安装 JDK ：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install java-1.8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+R+'" alt=""></p><ul><li>查看 JDK 是否安装成功：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+z+`" alt=""></p><ul><li>下载 nexus3 ：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/nexus-3.66.0-02-unix.tar.gz </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	--no-buffer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://download.sonatype.com/nexus/3/nexus-3.66.0-02-unix.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+I+'" alt=""></p><ul><li>解压并重命名：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nexus-3.66.0-02-unix.tar.gz -C /usr/local</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nexus-3.66.0-02 nexus3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+U+'" alt=""></p><ul><li>创建虚拟用户：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useradd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -M</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sbin/nologin nexus3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+O+`" alt=""></p><ul><li>授权 nexus3 目录权限：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nexus3:nexus3 /usr/local/nexus3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nexus3:nexus3 /usr/local/sonatype-work</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+$+`" alt=""></p><ul><li>配置 systemd ：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/systemd/system/nexus.service</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[Unit]</span></span>
<span class="line"><span>Description=nexus3 service</span></span>
<span class="line"><span>After=network.target</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>[Service]</span></span>
<span class="line"><span>Type=forking</span></span>
<span class="line"><span>LimitNOFILE=65536</span></span>
<span class="line"><span>ExecStart=/usr/local/nexus3/bin/nexus start</span></span>
<span class="line"><span>ExecStop=/usr/local/nexus3/bin/nexus stop </span></span>
<span class="line"><span>User=nexus3</span></span>
<span class="line"><span>Group=nexus3</span></span>
<span class="line"><span>Restart=on-abort</span></span>
<span class="line"><span>TimeoutSec=600</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>[Install]</span></span>
<span class="line"><span>WantedBy=multi-user.target</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><img src="`+T+'" alt=""></p><ul><li>启动：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable --now nexus.service</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+H+`" alt=""></p><ul><li>查询服务是否启动：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果失败，可以通过 journalctl -u nexus 调试错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sytemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status nexus</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+J+'" alt=""></p><h2 id="_5-2-访问并配置" tabindex="-1">5.2 访问并配置 <a class="header-anchor" href="#_5-2-访问并配置" aria-label="Permalink to &quot;5.2 访问并配置&quot;">​</a></h2><h3 id="_5-2-1-访问" tabindex="-1">5.2.1 访问 <a class="header-anchor" href="#_5-2-1-访问" aria-label="Permalink to &quot;5.2.1 访问&quot;">​</a></h3><ul><li>通过浏览器输入 <code>http://192.168.10.100:8081</code> 来进行访问（请先关闭防火墙）：</li></ul><p><img src="'+K+'" alt="image-20240309114510501"></p><ul><li>默认的用户名是 <code>admin</code> ，可以根据提示获取初始化密码：</li></ul><p><img src="'+W+'" alt="image-20240309114557125"></p><ul><li>登录到系统中：</li></ul><p><img src="'+X+'" alt="image-20240309114638073"></p><ul><li>根据提示，修改初始化密码：</li></ul><p><img src="'+Y+'" alt="image-20240309114720441"></p><ul><li>其余，下一步即可：</li></ul><p><img src="'+Q+'" alt="image-20240309114837106"></p><p><img src="'+j+'" alt="image-20240309114858532"></p><h3 id="_5-2-2-解释-nexus3-中仓库的类型" tabindex="-1">5.2.2 解释 nexus3 中仓库的类型 <a class="header-anchor" href="#_5-2-2-解释-nexus3-中仓库的类型" aria-label="Permalink to &quot;5.2.2 解释 nexus3 中仓库的类型&quot;">​</a></h3><ul><li>我们可以通过如下的步骤，查看 nexus3 中的仓库类型：</li></ul><p><img src="'+V+'" alt="image-20240309141551634"></p><p><img src="'+Z+'" alt="image-20240309141629121"></p><p><img src="'+ss+'" alt="image-20240309141725221"></p><ul><li><p>我们注意到，nexus3 中的仓库类型有 3 种，区别如下：</p></li><li><p>① hosted（宿主仓库，本地仓库）：</p><ul><li>该仓库是 nexus3 服务器上的本地仓库。用于存储和分发用户自己创建和管理的软件包。</li><li>hosted仓库可以是 Releases（只发布正式版本）、Snapshots（用于存储开发中的快照版本）或者 Mixed（混合使用 Releases 和 Snapshots）。</li><li>hosted 仓库通常用于管理内部开发的软件项目，或者作为私有的依赖库（一般不对外开放）。</li></ul></li><li><p>② proxy（代理仓库）：</p><ul><li>proxy 仓库是 Nexus3 作为中间代理，代理外部仓库，如：Maven Central、npm 官方仓库等的仓库。</li><li>当用户从 Proxy 仓库拉取软件包时，nexus3 会先从外部仓库下载软件包，然后缓存到本地，之后再提供给用户。这样可以加快后续的下载速度，因为用户可以从本地缓存中获取软件包，而不是每次都从外部网络下载。</li><li>proxy仓库通常用于加速外部仓库的访问速度，减少对外部网络的依赖，以及在网络不稳定或受限的情况下提供稳定的软件包以便获取服务。</li></ul></li><li><p>③ group（仓库组）：</p><ul><li>group 仓库是将多个仓库（可以是 hosted、proxy 或其他 group）组合在一起，形成一个逻辑上的仓库组。</li><li>用户可以像操作单个仓库一样操作 group 仓库，但实际上 nexus3 会根据配置的规则，从组内的多个仓库中寻找和提供构件。</li><li>group 仓库通常用于实现复杂的仓库管理策略，例如：可以将一个 proxy 仓库和一个或多个 hosted仓库组合在一起，以便在满足特定条件时从不同的仓库中获取软件包。</li></ul></li></ul><blockquote><p>注意⚠️：这三种仓库类型提供了灵活的仓库管理策略，使得 nexus3 能够适应不同的软件开发和部署需求。通过合理配置这些仓库类型，可以优化构建流程，提高效率，同时确保依赖的一致性和安全性。</p></blockquote><h3 id="_5-2-3-配置" tabindex="-1">5.2.3 配置 <a class="header-anchor" href="#_5-2-3-配置" aria-label="Permalink to &quot;5.2.3 配置&quot;">​</a></h3><h4 id="_5-2-3-1-创建-blob-存储空间" tabindex="-1">5.2.3.1 创建 blob 存储空间 <a class="header-anchor" href="#_5-2-3-1-创建-blob-存储空间" aria-label="Permalink to &quot;5.2.3.1 创建 blob 存储空间&quot;">​</a></h4><ul><li>因为 nexus3 可以作为多种软件包的集中式组件仓库，所以我们需要为其单独创建一个 blob 存储空间，即：</li></ul><p><img src="'+is+'" alt="image-20240309142652442"></p><p><img src="'+as+'" alt="image-20240309142748388"></p><p><img src="'+es+'" alt="image-20240309142818812"></p><h4 id="_5-2-3-2-创建-hosted-类型的仓库" tabindex="-1">5.2.3.2 创建 hosted 类型的仓库 <a class="header-anchor" href="#_5-2-3-2-创建-hosted-类型的仓库" aria-label="Permalink to &quot;5.2.3.2 创建 hosted 类型的仓库&quot;">​</a></h4><ul><li>创建仓库：</li></ul><p><img src="'+ls+'" alt="image-20240309142921618"></p><ul><li>选择仓库的类型：</li></ul><p><img src="'+ns+'" alt="image-20240309142957323"></p><ul><li>填写关键信息，完成仓库的创建：</li></ul><p><img src="'+ts+'" alt=""></p><p><img src="'+ps+'" alt="image-20240309144328206"></p><h4 id="_5-2-3-3-创建-proxy-类型的仓库" tabindex="-1">5.2.3.3 创建 proxy 类型的仓库 <a class="header-anchor" href="#_5-2-3-3-创建-proxy-类型的仓库" aria-label="Permalink to &quot;5.2.3.3 创建 proxy 类型的仓库&quot;">​</a></h4><ul><li>和创建 hosted 类型的仓库的步骤类似，只不过需要填写远程 yum 仓库的地址，如：</li></ul><p><img src="'+rs+'" alt="image-20240309145557434"></p><ul><li>仓库创建完毕时的状态如下：</li></ul><p><img src="'+hs+'" alt="image-20240309145709198"></p><h4 id="_5-2-3-4-创建-group-类型的仓库" tabindex="-1">5.2.3.4 创建 group 类型的仓库 <a class="header-anchor" href="#_5-2-3-4-创建-group-类型的仓库" aria-label="Permalink to &quot;5.2.3.4 创建 group 类型的仓库&quot;">​</a></h4><ul><li>将刚才创建的 hosted 类型和 proxy 类型的仓库，组合为 group 类型，即：</li></ul><p><img src="'+ds+'" alt="image-20240309145934873"></p><ul><li>仓库创建完毕时的状态如下：</li></ul><p><img src="'+cs+'" alt="image-20240309150013335"></p><h2 id="_5-3-配置-yum-源为-nexus3" tabindex="-1">5.3 配置 yum 源为 nexus3 <a class="header-anchor" href="#_5-3-配置-yum-源为-nexus3" aria-label="Permalink to &quot;5.3 配置 yum 源为 nexus3&quot;">​</a></h2><ul><li>在 nexus3 的界面中，复制 yum 源的地址：</li></ul><p><img src="'+os+'" alt="image-20240309150428604"></p><p><img src="'+us+'" alt="image-20240309150516576"></p><ul><li>临时禁用其他 yum 源：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config-manager --disable baseos appstream epel extras</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+ks+`" alt=""></p><ul><li>配置 yum 源：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/nexus3-baseos.repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[nexus-baseos]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name=Nexus AlmaLinux BaseOS</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baseurl=http://192.168.10.1:8081/repository/proxy-aliyun-yum/$releasever/BaseOS/$basearch/os/</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgcheck=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">countme=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-AlmaLinux-9</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata_expire=86400</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled_metadata=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/nexus3-appstream.repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[nexus3-appstream]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name=AlmaLinux $releasever - AppStream</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baseurl=http://192.168.10.1:8081/repository/proxy-aliyun-yum/$releasever/AppStream/$basearch/os/</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgcheck=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">countme=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-AlmaLinux-9</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata_expire=86400</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled_metadata=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>注意⚠️：目前，官方没有解决 group 元数据合并问题，所以使用 proxy 类型的仓库。</p></blockquote><p><img src="`+gs+'" alt=""></p><h2 id="_5-4-测试" tabindex="-1">5.4 测试 <a class="header-anchor" href="#_5-4-测试" aria-label="Permalink to &quot;5.4 测试&quot;">​</a></h2><ul><li>清除本地缓存，并重新构建缓存：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> makecache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+ms+'" alt=""></p><ul><li>安装 Nginx 进行测试 ：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+bs+'" alt=""></p>',308),vs=[Fs];function Cs(xs,Bs,_s,Es,fs,qs){return a(),i("div",null,vs)}const Ps=s(ys,[["render",Cs]]);export{Ds as __pageData,Ps as default};
